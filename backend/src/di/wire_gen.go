// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/goombeer/ask-yourself/backend/src/application/usecases"
	"github.com/goombeer/ask-yourself/backend/src/config"
	"github.com/goombeer/ask-yourself/backend/src/presentation/graphql"
	"github.com/goombeer/ask-yourself/backend/src/presentation/graphql/resolvers"
)

// Injectors from wire_dependency.go:

func InitAppServerDependency(cfg config.Config) (*gin.Engine, func()) {
	healthcheckUsecase := usecases.NewHealthcheckUsecase(cfg)
	resolver := resolvers.NewResolver(healthcheckUsecase)
	graphQLRequestHandlerGenerator := graphql.NewGraphQLRequestHandlerGenerator(resolver)
	engine := NewGinEngine(cfg, graphQLRequestHandlerGenerator)
	return engine, func() {
	}
}

func InitConfig() config.Config {
	configConfig := loadConfig()
	return configConfig
}

// wire_dependency.go:

var ApplicationSet = wire.NewSet(usecases.NewHealthcheckUsecase)

var GraphqlSet = wire.NewSet(resolvers.NewResolver, graphql.NewGraphQLRequestHandlerGenerator)
